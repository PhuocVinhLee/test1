import "./chunk-4VVWNIGP.js";
import {
  computed,
  defineComponent,
  h,
  ref
} from "./chunk-QZVRO5DS.js";
import "./chunk-JEXKZRFY.js";

// node_modules/vue3-countdown/dist/vue3-countdown.esm.js
var units = [
  { symbol: "D", value: 24 * 60 * 60 * 1e3 },
  { symbol: "H", value: 60 * 60 * 1e3 },
  { symbol: "m", value: 60 * 1e3 },
  { symbol: "s", value: 1e3 },
  { symbol: "S", value: 100 }
];
function replaceAll(source, search, replace) {
  const escapeStr = "~" + search;
  if (source.indexOf(escapeStr) > -1) {
    return source.split(escapeStr).map((part) => replaceAll(part, search, replace)).join(escapeStr);
  }
  return source.replace(new RegExp(search, "g"), String(replace));
}
function resolveCountdown(countdown, format = "HH:mm:ss") {
  const res = {};
  if (format.indexOf("~") > -1) {
    format = format.replace(/~[DHmsS]/g, "");
  }
  const thisUnits = units.filter((unit) => format.indexOf(unit.symbol) > -1);
  for (let i = 0, l = thisUnits.length; i < l; i++) {
    const { symbol, value } = thisUnits[i];
    const unitValue = l === 1 ? Math.ceil(countdown / value) : Math.floor(countdown / value);
    res[symbol] = unitValue;
    res[symbol + symbol] = unitValue < 10 ? `0${unitValue}` : unitValue;
    countdown %= value;
  }
  return res;
}
function formatCountdown(countdown, format = "HH:mm:ss") {
  const time = typeof countdown === "number" ? resolveCountdown(countdown, format) : countdown;
  const keys = Object.keys(time).sort((a, b) => b.length - a.length);
  let rs = format;
  keys.forEach((key) => {
    rs = replaceAll(rs, key, time[key]);
  });
  if (rs.indexOf("~") > -1) {
    rs = rs.replace(/~([DHmsS])/g, "$1");
  }
  return rs;
}
var Countdown = defineComponent({
  name: "Countdown",
  emits: ["change", "finish"],
  props: {
    // Countdown time. ms
    time: {
      type: Number,
      default: 0
    },
    format: {
      type: String,
      default: "HH:mm:ss"
    },
    autoStart: {
      type: Boolean,
      default: true
    }
  },
  setup(props, { emit }) {
    const currentTime = ref(props.time);
    const resolved = ref(resolveCountdown(currentTime.value, props.format));
    const inCountdown = ref(false);
    const config = {
      restTime: props.time,
      now: 0,
      timer: 0
    };
    const stepInterval = computed(() => /s/i.test(props.format) ? 30 : 1e3);
    const formatted = computed(() => formatCountdown(resolved.value, props.format));
    const start = () => {
      if (!inCountdown.value) {
        config.now = Date.now();
        config.restTime = currentTime.value;
        window.clearInterval(config.timer);
        config.timer = window.setInterval(step, stepInterval.value);
        inCountdown.value = true;
      }
    };
    const step = () => {
      const { restTime, now } = config;
      const interval = Date.now() - now;
      const target = restTime > interval ? restTime - interval : 0;
      const thisResolved = resolveCountdown(target, props.format);
      const thisFormatted = formatCountdown(thisResolved, props.format);
      if (thisFormatted !== formatted.value) {
        emit("change", {
          currentTime: target,
          resolved: thisResolved,
          formatted: thisFormatted
        });
        resolved.value = thisResolved;
      }
      currentTime.value = target;
      if (restTime <= interval) {
        stop();
      }
    };
    const stop = () => {
      doStop();
      emit("finish");
    };
    const doStop = () => {
      inCountdown.value = false;
      window.clearInterval(config.timer);
    };
    const reset = () => {
      currentTime.value = config.restTime = props.time;
      resolved.value = resolveCountdown(props.time, props.format);
      doStop();
    };
    if (props.autoStart) {
      start();
    }
    return {
      currentTime,
      resolved,
      formatted,
      inCountdown,
      start,
      stop,
      reset
    };
  },
  render() {
    const { currentTime, resolved, formatted } = this;
    return h("div", null, this.$slots.default && this.$slots.default({
      currentTime,
      resolved,
      formatted
    }) || this.formatted);
  }
});
export {
  Countdown as default
};
//# sourceMappingURL=vue3-countdown.js.map
